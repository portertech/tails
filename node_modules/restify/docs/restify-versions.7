.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RESTIFY\-VERSIONS" "7" "June 2011" "" ""
.
.SH "NAME"
\fBrestify\-versions\fR \- REST API Verisioning
.
.SH "SYNOPSIS"
.
.nf

var server = restify\.createServer({
  version: \'1\.2\.3\'
});

server\.get(\'/foo/:id\', function(req, res, next) {
  res\.send(200);
  return next();
});

server\.get(\'1\.1\.0\', \'/foo/:id\', function(req, res, next) {
  res\.send(204);
  return next();
});


GET /foo/1 HTTP/1\.1
Host: localhost
x\-api\-version: ">=1\.2\'

HTTP/1\.0 200 OK
Access\-Control\-Allow\-Origin: *
Access\-Control\-Allow\-Methods: GET
Server: restify (node\.js)
Connection: close
Date: Mon, 13 Jun 2011 04:01:48 GMT
x\-request\-id: 531981fb\-39ac\-4633\-a817\-76e8adbe40d5
x\-response\-time: 0
x\-api\-version: \'1\.2\.4\'
Content\-Length: 0


GET /foo/1 HTTP/1\.1
Host: localhost
x\-api\-version: "=1\.1\.0\'

HTTP/1\.0 204 No Content
Access\-Control\-Allow\-Origin: *
Access\-Control\-Allow\-Methods: GET
Server: restify (node\.js)
Connection: close
Date: Mon, 13 Jun 2011 04:01:48 GMT
x\-request\-id: 531981fb\-39ac\-4633\-a817\-76e8adbe40d5
x\-response\-time: 0
x\-api\-version: \'1\.1\.0\'
Content\-Length: 0
.
.fi
.
.SH "DESCRIPTION"
Restify versioning enables you to build a REST API that uses versioning the same way you might as an NPM package maintainer\. That is, you specify versions of your API, either as a "blanket" server configuration, or a\-la\-carte on a particular route\. A client MUST then send an x\-api\-version header specifying the version of the route they find acceptable\. This is all opt\-in, so if you don\'t want to run with versioning on, you don\'t have to\.
.
.P
Once you enable versioning, as shown above, you can pass in a \fBversion\fR flag to \fBrestify\.createServer\fR, which will set that version string on all routes automatically\. You can override each route with a different version string\. Note that restify processes routes in the order they are encountered, so the \fIfirst matching\fR route for an x\-api\-version header will be used\. You can explicitly disable versioning on a route by passing in \fBnull\fR as the first parameter\.
.
.P
As to version sytax, two are supported: semver and everything else\. If version is a valid semver header, then the client can send anything they would to npm (e\.g\., \'1\.x || >=2\.5\.0 || 5\.0\.0 \- 7\.2\.3\')\. Restify uses the lovely node\-semver library to parse these\. If version is not a valid semver string, then clients MUST send an exact match\.
.
.P
As mentioned above, if versioning is enabled, clients MUST send an x\-api\-version header describing the route version they want to use\. This avoids the dreaded \'default\' version a service would need to support in perpetuity\.
.
.P
Note that mixing semver and non\-semver version strings will result in undefined behavior\.
.
.P
If there is not a matching version found for a route (but other parameters are valid), a response of \fBHTTP/1\.1 449 Retry with an x\-api\-version header\fR is sent along with an \fBx\-api\-versions\fR header, which contains a list of valid versions for that route\.
.
.SH "COPYRIGHT/LICENSE"
Copyright 2011 Mark Cavage \fImcavage@gmail\.com\fR
.
.P
This software is licensed under the MIT License\.
.
.SH "SEE ALSO"
restify(3), restify\-routes(7)
