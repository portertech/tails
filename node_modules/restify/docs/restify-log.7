.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RESTIFY\-LOG" "7" "June 2011" "" ""
.
.SH "NAME"
\fBrestify\-log\fR \- The restify Logger
.
.SH "SYNOPSIS"
.
.nf

var restify = require(\'restify\');
var log = restify\.log;

log\.level(\'Debug\');

if (log\.debug())
  log\.debug(\'Here\'s an object: %o\', { foo: \'bar\' });
.
.fi
.
.SH "DESCRIPTION"
The restify logger is a minimal log4j\-esque logger that restify uses internally, and is generally useful for most projects\. It logs a standard formatted message to \fBstderr\fR, and prefixes like:
.
.IP "" 4
.
.nf

YYYY\-MM\-DD HH:MM:SSZ <LEVEL>: sprintf formatted message here\.
.
.fi
.
.IP "" 0
.
.P
Level is one of the following, in descending order:
.
.IP "\(bu" 4
Off
.
.IP "\(bu" 4
Fatal
.
.IP "\(bu" 4
Error
.
.IP "\(bu" 4
Warn
.
.IP "\(bu" 4
Info
.
.IP "\(bu" 4
Debug
.
.IP "\(bu" 4
Trace
.
.IP "" 0
.
.P
Descending means if you set the level to say \'Warn\', then the logger will only output messages that are of level Fatal/Error/Warn\. Everything else will be surpressed\. The default level is Info\. Off disables logging altogether\.
.
.P
Each level is accessed by a lower\-case method of the same name:
.
.IP "\(bu" 4
log\.fatal()
.
.IP "\(bu" 4
log\.error()
.
.IP "\(bu" 4
log\.warn()
.
.IP "\(bu" 4
log\.info()
.
.IP "\(bu" 4
log\.debug()
.
.IP "\(bu" 4
log\.trace()
.
.IP "" 0
.
.P
These methods take an \fBsprintf\fR style message, where the following format qualifiers are supported:
.
.IP "\(bu" 4
%d Number
.
.IP "\(bu" 4
%s String
.
.IP "\(bu" 4
%o Object
.
.IP "" 0
.
.P
You can check for a level being enabled in your code by calling these functions with no arguments:
.
.IP "" 4
.
.nf

if (log\.debug()) {
   // Some expensive calculation
   log\.debug(\'Here\'s %s object: %o\', \'foo\', {});
}
.
.fi
.
.IP "" 0
.
.P
The restify framework uses Fatal/Error/Warn/Info/Trace\. To get verbose internal logging from restify, set the level to Trace\. Debug is intended to be used by applications as a useful way to generate debug logs\.
.
.P
Finally, set the level with \fBlog\.level\fR\. The level params are on the \fBrestify\.LogLevel\fR object; you can pass either the enum value or a string\.
.
.SH "W3C LOGGING"
In addition to the "human" output functions above, the log also ships with a W3C compliant interceptor that you can use anywhere after \fBresponse\.send\fR has been invoked\. W3C log messages are basically this:
.
.IP "" 4
.
.nf

127\.0\.0\.1 \- admin [12/05/2011:18:31:49 GMT] "GET /foo/bar HTTP/1\.1" 200 79 58
.
.fi
.
.IP "" 0
.
.P
Where you have (in order) IP, username, timestamp, the HTTP request\-line, response code, bytes sent, and the time (ms) it took to respond\. The response time is not technically part of the W3C specification, but a lot of HTTP servers do it, and it\'s useful, so restify does it\. The user above comes from \fBreq\.username\fR, which automatically gets set if you\'re using HTTP Basic Authentication\. If your clients are not authenticating with that, you will have to set it in somewhere before the logger gets invoked\. Otherwise you\'ll just get a \'\-\' character in it\'s place (which is what the spec says to do)\.
.
.P
To use this logger, just add \fBlog\.w3c\fR to your request chain (somewhere after a handler that will have called \fBresponse\.send\fR\.
.
.SH "OUTPUT REDIRECTION"
By default, \fBlog\.w3c\fR writes to stdout, and the debug/info/\.\.\. functions write to \fBstderr\fR\. To redirect these, pass a node\.js \fBWriteableStream\fR into the functions \fBlog\.stdout\fR and \fBlog\.stderr\fR respectively\. For example, you could write a \fBWriteableStream\fR that is actually a rolling file appender\. That\'d be cool\.\.\.
.
.SH "COPYRIGHT/LICENSE"
Copyright 2011 Mark Cavage \fImcavage@gmail\.com\fR
.
.P
This software is licensed under the MIT License\.
.
.SH "SEE ALSO"
restify(3)
