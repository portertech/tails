.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RESTIFY\-REQUEST" "7" "June 2011" "" ""
.
.SH "NAME"
\fBrestify\-request\fR \- The Request Object
.
.SH "SYNOPSIS"
.
.nf

request: {
  body, \'Raw data sent from client\',
  contentType: function() {
    return \'application/json\'
  }
  params: {
    foo: \'bar\'
  },
  requestId: uuid(),
  startTime: new Date()\.getTime(),
  uriParams: {
    foo: \'bar\'
  },
  url: sanitized(request\.url),
  _url: url\.parse(request\.url),
}
.
.fi
.
.SH "DESCRIPTION"
The restify request object is simply a set of extensions over the standard node\.js http request object\.
.
.P
The additional parameters placed on the request object are:
.
.TP
body
Contains a UTF\-8 string that is the complete message sent from the client for this request\. Note that the body is subject to the \fBmaxRequestSize\fR set at server creation time\. You\'re not really expected to use this, as the body is parsed for you if it\'s in one of restify\'s supported formats\.
.
.TP
contentType
A function that returns a parsed out content\-type header for the content sent from the client\.
.
.TP
params
Assuming \fBbody\fR was either form\-urlencoded or application/json, body is a JS Object containing all the key value pairs sent from the client\. Note that nested Object parameters are not supported in form\-urlencoded, so if you need to support that, your API should only support JSON\.
.
.TP
requestId
requestId is a randomly generated type IV uuid, which is sent back to the client automagically in the \fBx\-request\-id\fR header\. You really should log this, as the intent is that a client of your API can provide this to you for debugging/repudation purposes\.
.
.TP
startTime
The time this request arrived at the server\. Note that this timestamp is when node\.js gives us the request object; so before the body is read, but after the headers are\. It\'s in milliseconds since epoch\.
.
.TP
uriParams
The uriParams object contains a set of key/value pairs for filled in parameters from your route description\. It is kept separate from the params object so that you can name uri parameters the same name as api parameters in your requests\.
.
.TP
url
restify overwrites the node\.js request\.url value with a \'santized\' version of the url\. What that really means is that any repeated \'/\' params are collapsed and any trailing \'/\' params are erased\.
.
.TP
\fIurl\fR
url is the result of the node\.js url\.parse method\.
.
.TP
authorization
If there was an Authorization header, restify will parse as much of it as it can\. The resulting object is available under the authorization param\. The object is guaranteed to have \fBscheme\fR and \fBcredentials\fR\. Credentials is the untouched string after being split off from the scheme\. Scheme is, obviously, the scheme\. As an example \fBAuthorization: Basic abc123\fR would result in an object of \fB{ scheme: \'Basic\', credentials: \'abc123\' }\fR\. If the scheme is \fBBasic\fR, restify will fully parse out the header as shown below:
.
.IP
{
.
.IP "" 4
.
.nf

scheme: \'Basic\',
credentials: \'abc123\',
basic: {
  username: \'mark\'
  password: \'secret\'
}
.
.fi
.
.IP "" 0
.
.IP
}
.
.SH "SUPPORTED CONTENT TYPES"
Currently restify supports the following content type when parsing requests:
.
.IP "\(bu" 4
application/json
.
.IP "\(bu" 4
application/x\-www\-form\-urlencoded
.
.IP "" 0
.
.P
Plans to support multipart form data are on the short\-term roadmap\.
.
.SH "COPYRIGHT/LICENSE"
Copyright 2011 Mark Cavage \fImcavage@gmail\.com\fR
.
.P
This software is licensed under the MIT License\.
.
.SH "SEE ALSO"
restify(3), restify\-routes(7)
